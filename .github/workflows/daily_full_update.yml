name: Daily full update (07:00 Zurich)

on:
  schedule:
    - cron: "0 5 * * *"   # 07:00 Europe/Zurich
  workflow_dispatch:
    inputs:
      mode:
        description: "Build scope"
        type: choice
        options: [all_played, last_completed]
        default: all_played
      force_gw:
        description: "Force build a specific GW (e.g. 3)"
        required: false
        type: string

jobs:
  full:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      PYTHONUTF8: "1"
      PYTHONPATH: ${{ github.workspace }}
      FPL_PROJECT_ROOT: ${{ github.workspace }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # DEBUG: montrer ce que voit le runner
      - name: Debug repo & requirements
        run: |
          echo "Python:"; python -V
          echo "--- git branch & last commit ---"
          git rev-parse --abbrev-ref HEAD
          git log -1 --pretty=oneline
          echo "--- list requirements files ---"
          git ls-files | grep -i 'requirements.*\.txt' || true
          echo "--- root requirements.txt content ---"
          if [ -f requirements.txt ]; then sed -n '1,120p' requirements.txt; else echo "requirements.txt ABSENT"; fi
          echo "------------------------------------"

      # FORCER des versions compatibles Py 3.13 (on n'utilise PAS -r requirements.txt ici)
      - name: Install dependencies (forced, no -r)
        run: |
          python -m pip install --upgrade pip
          pip install "pandas>=2.2.3,<2.3" "numpy>=2.1" "requests>=2.32.3,<3" "pytz>=2024.1"

      # (Nouveau) Petit diagnostic minutes_total pour repérer les GWs jouées
      - name: GW diagnostics (minutes_total for first GWs)
        run: |
          python - << 'PY'
import requests, time
UA={'User-Agent':'FPL-Diag/1.0'}
def minutes(gw):
    for i in range(4):
        r=requests.get(f'https://fantasy.premierleague.com/api/event/{gw}/live/', headers=UA, timeout=30)
        if r.ok:
            els=(r.json().get('elements') or [])
            return sum((e.get('stats') or {}).get('minutes',0) or 0 for e in els)
        time.sleep(2*(i+1))
    return -1
for gw in range(1,11):
    print(f'GW{gw}: minutes_total={minutes(gw)}')
PY

      # Vérifications/ajustements éventuels propres à ton repo
      - name: Check CSV/JSON/TXT conflicts
        run: |
          if [ -f scripts/check_csv_conflicts.py ]; then
            python scripts/check_csv_conflicts.py
          else
            echo "skip check_csv_conflicts.py"
          fi

      # 1) Fetch & bases (si présents)
      - name: Fetch FPL data (players_raw, fixtures, teams, player_idlist)
        run: |
          if [ -f scripts/fetch_bootstrap.py ] ; then python scripts/fetch_bootstrap.py ; else echo "skip fetch_bootstrap"; fi

      - name: Update deadlines
        run: |
          if [ -f scripts/update_deadlines.py ] ; then python scripts/update_deadlines.py ; else echo "skip update_deadlines"; fi

      # 2) Snapshots (si script présent)
      - name: Snapshot players_raw
        run: |
          if [ -f scripts/snapshot_players_raw.py ] ; then python scripts/snapshot_players_raw.py ; else echo "skip snapshot_players_raw.py"; fi

      # 3) Calculs quotidiens (si présents)
      - name: NTI deltas
        run: |
          if [ -f scripts/calc_nti_deltas.py ] ; then python scripts/calc_nti_deltas.py ; else echo "skip calc_nti_deltas"; fi

      - name: Price change forecast
        run: |
          if [ -f scripts/price_change_forecast.py ] ; then python scripts/price_change_forecast.py ; else echo "skip price_change_forecast"; fi

      - name: Append price_change_forecast to history
        run: |
          if [ -f scripts/append_price_change_forecast.py ] ; then python scripts/append_price_change_forecast.py ; else echo "skip append_price_change_forecast.py"; fi

      # (Nouveau) Construire les GW (jouées) ou forcer une GW précise
      - name: Build GWs (played or force)
        run: |
          set -euo pipefail
          FORCE="${{ github.event.inputs.force_gw }}"
          MODE="${{ github.event.inputs.mode }}"
          if [ -n "$FORCE" ]; then
            echo "Forcing build of GW=$FORCE"
            python scripts/build_one_gw_csv.py --gw "$FORCE"
          else
            if [ "$MODE" = "last_completed" ]; then
              GW=$(python - << 'PY'
import requests
UA={'User-Agent':'FPL-LastGW/1.0'}
evs=requests.get('https://fantasy.premierleague.com/api/bootstrap-static/',headers=UA,timeout=30).json()['events']
done=[e for e in evs if e.get('finished') or e.get('data_checked')]
print(sorted(done,key=lambda x:x['id'])[-1]['id'] if done else next((e['id'] for e in evs if e.get('is_current')),1))
PY
)
              echo "Building last completed GW=$GW"
              python scripts/build_one_gw_csv.py --gw "$GW"
            else
              python scripts/build_all_gw_csvs.py
            fi
          fi
          echo "List season files:"
          ls -alh data/season || true

      # 4) Constructions génériques (toujours)
      - name: Build merged GW outputs
        run: python scripts/build_gw_outputs.py

      - name: Build cleaned_players.csv (conditional)
        run: |
          if [ -f data/merged_gw.csv ] && [ -f data/players_raw.csv ]; then
            python scripts/build_cleaned_players.py
          else
            echo "skip cleaned_players: data/merged_gw.csv or data/players_raw.csv missing"
          fi

      # 5) Global test (optionnel, ne casse pas le run)
      - name: Global test
        run: |
          if [ -f scripts/run_global_test.py ] ; then python scripts/run_global_test.py --with-api-check --with-fixtures-diff || true ; else echo "skip run_global_test"; fi

      # 6) Index HTML (snapshots & season)
      - name: Build directory indexes (snapshots & season)
        run: |
          if [ -f scripts/build_indexes.py ] ; then python scripts/build_indexes.py ; else echo "skip build_indexes.py"; fi

      # 6.5) Summaries
      - name: Build summaries
        run: |
          if [ -f scripts/build_summaries.py ] ; then python scripts/build_summaries.py ; else echo "skip build_summaries.py"; fi

      # 7) Commit & push (déclenchera Pages via static.yml on:push)
      - name: Commit and push changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add -A
          git commit -m "chore: daily full update (07:00 Zurich)" || echo "No changes"
          git push
